<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/blog/2022/09/10/springSecurity/springSecurity/"/>
      <url>/blog/2022/09/10/springSecurity/springSecurity/</url>
      
        <content type="html"><![CDATA[<p>title: spring security<br>date: 2022-09-09 09:48:41<br>tags: docker<br>categories:<br>top_img: &#x2F;images&#x2F;noteTop&#x2F;docker.webp<br>cover: &#x2F;images&#x2F;noteTop&#x2F;docker.webpb</p><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><h2 id="表单认证登录流程"><a href="#表单认证登录流程" class="headerlink" title="表单认证登录流程"></a>表单认证登录流程</h2><blockquote><p>认证流程图</p></blockquote><p>请求到达认证过滤器进行认证</p><ol><li>将数据整理到 Authentication 中</li><li>将 Authentication 传递给 AuthenticationManager 进行认证</li><li>失败</li><li>成功</li></ol><img src="/blog/2022/09/10/springSecurity/springSecurity/1662691902075.png" class="" width="1662691902075"><blockquote><p>ProviderManger</p></blockquote><p>该类是 AuthenticationManager  的实现类，负责认证。在 ProviderManager 中包含了多个 AuthenticationProviders 中的 AuthenticationProvider 负责具体如何实现认证。不同的 AuthenticationProvider  负责不同的类型认证</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662691860634.png" class="" width="1662691860634"><h2 id="认证过滤器"><a href="#认证过滤器" class="headerlink" title="认证过滤器"></a>认证过滤器</h2><blockquote><p> AbstractAuthenticationProcessingFilter </p></blockquote><p>基于浏览器的基于 HTTP 的身份验证请求的抽象处理器</p><ul><li><pre><code class="Java">Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response);执行实际身份验证</code></pre></li></ul><blockquote><p>UsernamePasswordAuthenticationFilter </p><p>继承AbstractAuthenticationProcessingFilter </p><p>处理身份验证表单提交。</p></blockquote><img src="/blog/2022/09/10/springSecurity/springSecurity/1662690356338.png" class="" width="1662690356338"><h3 id="执行身份认证详解"><a href="#执行身份认证详解" class="headerlink" title="执行身份认证详解"></a>执行身份认证详解</h3><blockquote><p>attemptAuthentication 方法</p></blockquote><img src="/blog/2022/09/10/springSecurity/springSecurity/1662690693829.png" class="" width="1662690693829"><ol><li><p>判断是否是post请求</p></li><li><p>获取用户名和密码</p></li><li><p>获取 AuthenticatinManager 对象 ，该对象作为 UsernamePasswordAuthenticationFilter 的一个属性，默认的 AuthenticationManger 实现是 ProviderManager</p><ul><li><img src="/blog/2022/09/10/springSecurity/springSecurity/1662691032931.png" class="" width="1662691032931"></li><li><img src="/blog/2022/09/10/springSecurity/springSecurity/1662691000558.png" class="" width="1662691000558"></li></ul></li><li><p>执行 authenticate() 方法进行认证</p></li></ol><h3 id="执行authenticate-详解"><a href="#执行authenticate-详解" class="headerlink" title="执行authenticate() 详解"></a>执行authenticate() 详解</h3><blockquote><p>ProviderManager 对象执行 authenticate() 方法进行认证</p></blockquote><ol><li><p>初始化数据</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662704843083.png" class="" width="1662704843083"></li><li><p>循环遍历 provider 对象，执行 authenticate() 方法</p><ol><li><p>检查 provider 是否支持认证该类型</p></li><li><p>开始验证</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662704546920.png" class="" width="1662704546920"></li></ol></li><li><p>在默认情况下，provider 对象为：AnonymousAuthenticationProvider ，该对象不支持认证 UsernamePasswordAuthenticationToken 类型，它支持 AnonymousAuthenticationToken 类型的认证。</p></li><li><p>如果没有认证或者 存在 parent 对象，则交给 parent 对象来处理认证</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662705379984.png" class="" width="1662705379984"></li><li><p>parent 对象也是一个 providerManager，该对象的 providers 中有一个 DaoAuthenticationProvider 对象，最终执行的 authenticate() 方法由 AbstractUserDetailsAuthenticationProvider 实现。关键代码如下：</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662706049953.png" class="" width="1662706049953"><p>调用 retrieveUser() 方法，该方法由 DaoAuthenticationProvider 实现，关键代码如下：</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662706246301.png" class="" width="1662706246301"><p>获取 UserDetailsService 对象，调用 loadUserByUsername() 方法，通过用户名获取对象数据。这里默认的 User DetailsService 对象为 InMemoryUserDetailsManager</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662706497792.png" class="" title="InMemoryUserDetailsManager"></li></ol><h3 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h3><blockquote><p>spring boot 会自动为 spring Security 做一些配置</p></blockquote>   <img src="/blog/2022/09/10/springSecurity/springSecurity/1662793220099.png" class="" width="1662793220099"><p>   通过以上分析可知，只需要自定义一个 UserDetailService 的实现就可以了。在自定义的实现里面的  loadUserByUsername() 方法中定义获取数据源的操作，可以通过用户名去数据库查询用户信息。</p><h2 id="密码加密与校验"><a href="#密码加密与校验" class="headerlink" title="密码加密与校验"></a>密码加密与校验</h2><blockquote><p>loadUserByUsername() 方法只是获取了用户数据，并没有对用户数据进行校验，在获取了用户信息之后，需要进行密码的校验，校验成功才能进入首页。</p></blockquote><h3 id="密码校验过程"><a href="#密码校验过程" class="headerlink" title="密码校验过程"></a>密码校验过程</h3><ol><li><p>获取用户信息之后执行 additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication); 方法进行校验</p><p><img src="C:/Users/wujie/AppData/Roaming/Typora/typora-user-images/1662799354982.png" alt="AbstractUserDetailsAuthenticationProvider"></p></li><li><p>密码校验核心代码，调用 passwordEncoder 的 matches(presentedPassword, userDetails.getPassword()) 方法</p><p><img src="C:/Users/wujie/AppData/Roaming/Typora/typora-user-images/1662800758353.png" alt="DaoAuthenticationProvider"></p></li><li><p>默认的passwordEncoder 对象是 DelegatingPasswordEncoder，它是一个委托类，通过它来选择不同的编码方式进行校验密码， matches() 方法如下</p><p><img src="C:/Users/wujie/AppData/Roaming/Typora/typora-user-images/1662806342292.png" alt="DelegatingPasswordEncoder"> </p><p>第235行是获取实际校验密码的 PasswordEncoder 类对象</p><img src="/blog/2022/09/10/springSecurity/springSecurity/1662806461919.png" class="" width="1662806461919"></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java集合</title>
      <link href="/blog/2022/07/27/java/collection/"/>
      <url>/blog/2022/07/27/java/collection/</url>
      
        <content type="html"><![CDATA[<h1 id="集合类图"><a href="#集合类图" class="headerlink" title="集合类图"></a>集合类图</h1><h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><img src="/blog/2022/07/27/java/collection/collection.png" class=""><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><img src="/blog/2022/07/27/java/collection/map.png" class=""><h2 id="增强-for-底层是迭代器"><a href="#增强-for-底层是迭代器" class="headerlink" title="增强 for 底层是迭代器"></a>增强 for 底层是迭代器</h2><blockquote><p>简化版的迭代器</p></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>元素可重复，有序</li><li>支持索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/blog/2022/07/27/java/JavaSE/"/>
      <url>/blog/2022/07/27/java/JavaSE/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IntStream <span class="title function_">map</span><span class="params">(IntUnaryOperator mapper)</span>;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> stream.map(i -&gt; i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该注解是函数式接口</span></span><br><span class="line"><span class="comment">// 什么是函数式接口</span></span><br><span class="line"><span class="comment">// 一个只能有一个抽象方法的接口。</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntUnaryOperator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this operator to the given operand.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operand the operand</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the operator result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> operand)</span>;</span><br></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>对象在进行网络传输或者保存到硬盘当中需要进行序列化操作，把对象变成字节序列。</p><p>从文件中恢复对象，称为反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">        people.name = <span class="string">&quot;伍杰&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/people.txt&quot;</span>)));</span><br><span class="line">        oos.writeObject(people);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/people.txt&quot;</span>)));</span><br><span class="line">        <span class="type">People</span> <span class="variable">o</span> <span class="operator">=</span> (People) ois.readObject();</span><br><span class="line">        System.out.println(o.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-8-的流库"><a href="#Java-8-的流库" class="headerlink" title="Java 8 的流库"></a>Java 8 的流库</h1><h2 id="从迭代到流的操作"><a href="#从迭代到流的操作" class="headerlink" title="从迭代到流的操作"></a>从迭代到流的操作</h2><blockquote><p>流遵循 <strong>做什么而非怎么做</strong> 。</p></blockquote><p>对元素进行遍历，过滤，计算等均可使用流进行替代。使用流更加的简单方便。</p><h3 id="流和集合的差异"><a href="#流和集合的差异" class="headerlink" title="流和集合的差异"></a>流和集合的差异</h3><ol><li>流不存储元素</li><li>流从操作不会修改数据源</li><li>流的操作是尽可能的惰性的。这意味者直至需要其结果时，操作才会执行。<ul><li>比如生成一个无限流，不会阻塞住，直到执行操作才会开始生成无限流。</li></ul></li></ol><h3 id="工作流是操作流的典型流程"><a href="#工作流是操作流的典型流程" class="headerlink" title="工作流是操作流的典型流程"></a>工作流是操作流的典型流程</h3><ol><li>创建一个流</li><li>指定将初始化流转化为其他流的中间操作，可能包含多个步骤</li><li>应用终止操作，从而产生结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountLongWords</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contents</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(<span class="string">&quot;D://stream.txt&quot;</span>)), StandardCharsets.UTF_8);</span><br><span class="line">        List&lt;String&gt; words = List.of(contents.split(<span class="string">&quot;\\PL+&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word.length() &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        count = words.stream().filter(w -&gt; w.length() &gt; <span class="number">4</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        count = words.parallelStream().filter(w -&gt; w.length() &gt; <span class="number">4</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateStream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 返回其元素是指定值的顺序有序流</span></span><br><span class="line">        Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用已有的数组生成流</span></span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(array, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成常量流</span></span><br><span class="line">        Stream&lt;String&gt; e = Stream.generate(() -&gt; <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机数字无限流</span></span><br><span class="line">        Stream&lt;Double&gt; generate = Stream.generate(Math::random);</span><br><span class="line">        Stream&lt;Double&gt; limit = generate.limit(<span class="number">10</span>);</span><br><span class="line">        System.out.println(limit.toArray());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器 反复将函数应用到之前的结果上</span></span><br><span class="line">        Stream&lt;BigInteger&gt; iterate = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.ONE));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的转换"><a href="#流的转换" class="headerlink" title="流的转换"></a>流的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用已有的数组生成流</span></span><br><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(array, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 转换为 String 类型</span></span><br><span class="line">Stream&lt;String&gt; stringStream1 = stream.mapToObj(i -&gt; String.valueOf(i));</span><br><span class="line"><span class="comment">// 排序 产生一个新的流</span></span><br><span class="line">Stream&lt;String&gt; sorted =          stringStream1.sorted(Comparator.comparing(String::length));</span><br><span class="line"><span class="comment">// 去除重复数据</span></span><br><span class="line">Stream&lt;String&gt; distinct = sorted.distinct();</span><br></pre></td></tr></table></figure><h2 id="简单约简"><a href="#简单约简" class="headerlink" title="简单约简"></a>简单约简</h2><blockquote><p>约简是一种终结操作</p></blockquote><ul><li>Optional<T> count()</li><li>Optional<T> max(Comparator&lt;? super T comparator)   </li><li>Optional<T> min(Comparator&lt;? super T comparator)</li><li>Optional<T> findFirst()</li><li>Optional<T> findAny()</li><li>anyMatch</li><li>allMatch</li><li>noneMatch</li></ul><h2 id="Optional类型"><a href="#Optional类型" class="headerlink" title="Optional类型"></a>Optional类型</h2><p>该类型对象是一种包装器对象。</p><h3 id="获取-Optional-值"><a href="#获取-Optional-值" class="headerlink" title="获取 Optional 值"></a>获取 Optional 值</h3><ul><li>T orElse(T other)</li><li>T orElseGet(Supplier&lt;? extends T other)</li><li><X extends Throwable> T orElseThrow(Supplier&lt;? extends X&gt; exceptionSuplier)</li></ul><h3 id="消费-Optional-值"><a href="#消费-Optional-值" class="headerlink" title="消费 Optional 值"></a>消费 Optional 值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">integers.add(<span class="number">1</span>);</span><br><span class="line">integers.add(<span class="number">2</span>);</span><br><span class="line">integers.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">AtomicInteger</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"><span class="comment">// 获取最大值对象</span></span><br><span class="line">Optional&lt;Integer&gt; max = integers.stream().max(Integer::compareTo);</span><br><span class="line"><span class="comment">// 如果值存在，则赋值给 maxValue</span></span><br><span class="line">max.ifPresent(c -&gt; maxValue.set(c));</span><br><span class="line"><span class="comment">// 如果存在值，则使用该值执行给定的操作，否则执行给定的基于空的操作</span></span><br><span class="line">max.ifPresentOrElse(c -&gt; maxValue.set(c), () -&gt; System.out.println(<span class="string">&quot;No num&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="管道化-Optional-值"><a href="#管道化-Optional-值" class="headerlink" title="管道化 Optional 值"></a>管道化 Optional 值</h3><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p> <strong>当你需要对某一个数据进行非空判断的时候，就可以考虑采用Optional类</strong> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 用来存放学生的名字</span></span><br><span class="line">      String stuName;</span><br><span class="line">      <span class="comment">// 1.传统判断NULL的方法</span></span><br><span class="line">      <span class="keyword">if</span> (student.getName() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stuName = student.getName();</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 2.使用Optional判断NULL</span></span><br><span class="line">      <span class="comment">// 不为空则输出结果</span></span><br><span class="line">      Optional.ofNullable(student.getName)</span><br><span class="line">          .ifPresent(v -&gt; System.out.println(v));</span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的servlet容器</title>
      <link href="/blog/2022/07/16/tomcat/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84servlet%E5%AE%B9%E5%99%A8/"/>
      <url>/blog/2022/07/16/tomcat/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84servlet%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>Web服务器也称为超文本传输协议（HyperText Transfer Protocol, HTTP）服务器，因为它使用HTTP与客户端进行通信。基于Java的Web服务器会使用两个重要的类：java.net.Socket 类和 java.net.ServerSocket 类，并通过发送 HTTP 消息进行通信。</p></li><li><p>本章先介绍HTTP协议和这两个类，然后介绍一个简单的Web服务器</p></li><li><p>本章实现了从服务器获取简单 html 的功能</p></li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP 是一种基于“请求 - 响应”的协议。HTTP使用可靠的TCP连接，TCP协议默认使用TCP 80端口。</p><ol><li>客户端发送请求给服务器</li><li>服务器接收请求并处理</li><li>服务器返回处理结果给客户端</li></ol><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><p>一个HTTP请求包含以下三个部分</p><ul><li>请求方法—统一资源标识符（Uniform Resource Identifier， URI）—协议&#x2F;版本</li><li>请求头</li><li>实体</li></ul><blockquote><p>HTTP请求示例</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /blog/ HTTP/1.1</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: Webstorm-348865b=aaf8c686-92b0-4e76-824a-8ad87ab30f60</span><br><span class="line">Host: localhost:4000</span><br><span class="line">Referer: http://localhost:4000/blog/2022/07/15/tomcat/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat/</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49</span><br><span class="line">X-PJAX: true</span><br><span class="line">X-PJAX-Selectors: [&quot;head &gt; title&quot;,&quot;#config-diff&quot;,&quot;#body-wrap&quot;,&quot;#rightside-config-hide&quot;,&quot;#rightside-config-show&quot;,&quot;.js-pjax&quot;]</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">sec-ch-ua: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;103&quot;, &quot;Chromium&quot;;v=&quot;103&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line"></span><br><span class="line">lastName=Franks&amp;firstName=Michael</span><br></pre></td></tr></table></figure><p>请求方法 — 统一资源标识符 — 协议&#x2F;版本出现在请求的第一行</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /home.html HTTP/1.1</span><br></pre></td></tr></table></figure><ul><li>请求方法<ul><li>在HTTP 1.1 中支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE。</li></ul></li><li>URI 指定 Internet 资源的完整路径。URI通常会被解释为相对于服务器根目录的相对路径。因此总是以“&#x2F;”开头。</li></ul><blockquote><p>请求头包含客户端环境和请求实体正文的相关信息</p><p>各个请求头之间使用换行隔开</p><p>请求头和请求体一起有一个空行，该空行只有 CRLF（换行）符</p></blockquote><p>上面的HTTP请求示例中最后一行是请求体正文</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastName=Franks&amp;firstName=Michael</span><br></pre></td></tr></table></figure><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>与HTTP请求类似，HTTP响应包括三个部分：</p><ul><li>协议——状态码——描述</li><li>响应头</li><li>响应实体段</li></ul><p>下面是HTTP响应的示例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Hexo</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sat, 16 Jul 2022 02:11:33 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Keep-Alive: timeout=5</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><h1 id="Web服务器应用程序"><a href="#Web服务器应用程序" class="headerlink" title="Web服务器应用程序"></a>Web服务器应用程序</h1><p>包括以下三个类</p><ul><li>HttpServer</li><li>Request</li><li>Response</li></ul><p>该应用程序仅发送位于指定目录的静态资源的请求，如HTML文件和图像文件。模拟tomcat服务器发送数据给客户端。</p><h2 id="HttpServer类"><a href="#HttpServer类" class="headerlink" title="HttpServer类"></a>HttpServer类</h2><p>HttpServer类表示一个Web服务器</p><p>功能如下：</p><ul><li>接收并解析请求</li><li>处理请求，返回结果给服务器</li></ul><h3 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h3><ol><li>HttpServer中创建ServerSocket对象</li><li>循环等待客户端连接</li><li>处理请求，返回结果后断开连接</li></ol><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wujie.ex01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wujie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-07-15 13:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WEB_ROOT</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + <span class="string">&quot;webroot&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown command</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHUTDOWN_COMMAND</span>  <span class="operator">=</span> <span class="string">&quot;/SHUTDOWN&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the shutdown command received</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">shutdown</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpServer</span>();</span><br><span class="line">        httpServer.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(WEB_ROOT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port, <span class="number">1</span>, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Loop waiting for a request</span></span><br><span class="line">        <span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                input = socket.getInputStream();</span><br><span class="line">                output = socket.getOutputStream();</span><br><span class="line">                <span class="comment">// create Request object and parse</span></span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(input);</span><br><span class="line">                request.parse();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// create Response object</span></span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>();</span><br><span class="line">                response.setRequest(request);</span><br><span class="line">                response.sendStaticResource();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Close the socket</span></span><br><span class="line">                socket.close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// check if the previous URI is a shutdown command</span></span><br><span class="line">                shutdown = request.getUri().equals(SHUTDOWN_COMMAND);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h2><blockquote><p>Request类负责获取请求数据，解析请求头，解析Uri</p></blockquote><h3 id="代码详解："><a href="#代码详解：" class="headerlink" title="代码详解："></a>代码详解：</h3><blockquote><p> 请求方法 — 统一资源标识符 — 协议&#x2F;版本出现在请求的第一行</p><p>GET &#x2F;home.html HTTP&#x2F;1.1</p></blockquote><ol><li>读取客户端发来的数据</li><li>解析请求资源路径<ol><li>资源路径在请求数据第一行</li><li>通过找到路径的前后空格截取到资源路径</li></ol></li></ol><h3 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wujie.ex01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wujie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-07-15 14:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream input;</span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Request</span><span class="params">(InputStream input)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.input = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// read a set of characters from the socket</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">2048</span>);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i = input.read(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            i = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            request.append((<span class="type">char</span>) buffer[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(request.toString());</span><br><span class="line">        uri = parseUri(request.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseUri</span><span class="params">(String requestString)</span> &#123;</span><br><span class="line">        <span class="type">int</span> index1, index2;</span><br><span class="line">        index1 = requestString.indexOf(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index1 != -<span class="number">1</span>) &#123;</span><br><span class="line">            index2 = requestString.indexOf(<span class="string">&#x27; &#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (index1 &lt; index2) &#123;</span><br><span class="line">                <span class="keyword">return</span> requestString.substring(index1 + <span class="number">1</span>, index2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUri</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Response类"><a href="#Response类" class="headerlink" title="Response类"></a>Response类</h2><blockquote><p>根据客户端的请求路径，返回资源</p></blockquote><h3 id="代码详解-1"><a href="#代码详解-1" class="headerlink" title="代码详解"></a>代码详解</h3><ol><li>从request对象中获取请求资源路径</li><li>通过资源路径解析出资源</li><li>设置请求头</li><li>发送请求头和请求体（数据）</li></ol><blockquote><p>发送数据就是将数据写入socket，可以多次写入，但是注意请求头需要定义Content-Length（数据长度）或者设置Keep-Alive: timeout&#x3D;5 长连接超时时间，因为socket连接发送数据是直接发送过去，接收端需要知道数据的长度，才能正确解析数据。不然不知道数据是否完整的发送过来，就无法正确显示页面。</p></blockquote><h3 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wujie.ex01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wujie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-07-15 14:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BUFFER_SIZE</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    Request request;</span><br><span class="line">    OutputStream output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Response</span><span class="params">(OutputStream output)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequest</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(HttpServer.WEB_ROOT, request.getUri());</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">int</span> <span class="variable">ch</span> <span class="operator">=</span> fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (ch != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">                    sb.append(s);</span><br><span class="line">                    ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1&gt;test&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//                sb.append(last);</span></span><br><span class="line"></span><br><span class="line">                length = sb.length() + last.length();</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line"><span class="comment">//                        &quot;Content-Length: &quot; + length + &quot;\r\n&quot; +</span></span><br><span class="line">                        <span class="string">&quot;Keep-Alive: timeout=5\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> message + sb;</span><br><span class="line">                <span class="type">byte</span>[] sbByte = result.getBytes();</span><br><span class="line">                output.write(sbByte);</span><br><span class="line">                output.write(last.getBytes());</span><br><span class="line"><span class="comment">//                output.flush();</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// file not found</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;HTTP/1.1 404 File Not Found\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Length: 23\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;h1&gt;File Not Found&lt;/h1&gt;&quot;</span>;</span><br><span class="line">                output.write(errorMessage.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> How Tomcat Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的Web服务器</title>
      <link href="/blog/2022/07/15/tomcat/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/blog/2022/07/15/tomcat/1.%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>Web服务器也称为超文本传输协议（HyperText Transfer Protocol, HTTP）服务器，因为它使用HTTP与客户端进行通信。基于Java的Web服务器会使用两个重要的类：java.net.Socket 类和 java.net.ServerSocket 类，并通过发送 HTTP 消息进行通信。</p></li><li><p>本章先介绍HTTP协议和这两个类，然后介绍一个简单的Web服务器</p></li><li><p>本章实现了从服务器获取简单 html 的功能</p></li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP 是一种基于“请求 - 响应”的协议。HTTP使用可靠的TCP连接，TCP协议默认使用TCP 80端口。</p><ol><li>客户端发送请求给服务器</li><li>服务器接收请求并处理</li><li>服务器返回处理结果给客户端</li></ol><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><p>一个HTTP请求包含以下三个部分</p><ul><li>请求方法—统一资源标识符（Uniform Resource Identifier， URI）—协议&#x2F;版本</li><li>请求头</li><li>实体</li></ul><blockquote><p>HTTP请求示例</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /blog/ HTTP/1.1</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: Webstorm-348865b=aaf8c686-92b0-4e76-824a-8ad87ab30f60</span><br><span class="line">Host: localhost:4000</span><br><span class="line">Referer: http://localhost:4000/blog/2022/07/15/tomcat/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90tomcat/</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36 Edg/103.0.1264.49</span><br><span class="line">X-PJAX: true</span><br><span class="line">X-PJAX-Selectors: [&quot;head &gt; title&quot;,&quot;#config-diff&quot;,&quot;#body-wrap&quot;,&quot;#rightside-config-hide&quot;,&quot;#rightside-config-show&quot;,&quot;.js-pjax&quot;]</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">sec-ch-ua: &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;103&quot;, &quot;Chromium&quot;;v=&quot;103&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line"></span><br><span class="line">lastName=Franks&amp;firstName=Michael</span><br></pre></td></tr></table></figure><p>请求方法 — 统一资源标识符 — 协议&#x2F;版本出现在请求的第一行</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /home.html HTTP/1.1</span><br></pre></td></tr></table></figure><ul><li>请求方法<ul><li>在HTTP 1.1 中支持7种请求方法：GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE。</li></ul></li><li>URI 指定 Internet 资源的完整路径。URI通常会被解释为相对于服务器根目录的相对路径。因此总是以“&#x2F;”开头。</li></ul><blockquote><p>请求头包含客户端环境和请求实体正文的相关信息</p><p>各个请求头之间使用换行隔开</p><p>请求头和请求体一起有一个空行，该空行只有 CRLF（换行）符</p></blockquote><p>上面的HTTP请求示例中最后一行是请求体正文</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastName=Franks&amp;firstName=Michael</span><br></pre></td></tr></table></figure><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>与HTTP请求类似，HTTP响应包括三个部分：</p><ul><li>协议——状态码——描述</li><li>响应头</li><li>响应实体段</li></ul><p>下面是HTTP响应的示例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Hexo</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sat, 16 Jul 2022 02:11:33 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Keep-Alive: timeout=5</span><br><span class="line">Transfer-Encoding: chunked</span><br></pre></td></tr></table></figure><h1 id="Web服务器应用程序"><a href="#Web服务器应用程序" class="headerlink" title="Web服务器应用程序"></a>Web服务器应用程序</h1><p>包括以下三个类</p><ul><li>HttpServer</li><li>Request</li><li>Response</li></ul><p>该应用程序仅发送位于指定目录的静态资源的请求，如HTML文件和图像文件。模拟tomcat服务器发送数据给客户端。</p><h2 id="HttpServer类"><a href="#HttpServer类" class="headerlink" title="HttpServer类"></a>HttpServer类</h2><p>HttpServer类表示一个Web服务器</p><p>功能如下：</p><ul><li>接收并解析请求</li><li>处理请求，返回结果给服务器</li></ul><h3 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h3><ol><li>HttpServer中创建ServerSocket对象</li><li>循环等待客户端连接</li><li>处理请求，返回结果后断开连接</li></ol><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wujie.ex01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wujie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-07-15 13:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WEB_ROOT</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + <span class="string">&quot;webroot&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown command</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHUTDOWN_COMMAND</span>  <span class="operator">=</span> <span class="string">&quot;/SHUTDOWN&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the shutdown command received</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">shutdown</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpServer</span>();</span><br><span class="line">        httpServer.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(WEB_ROOT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port, <span class="number">1</span>, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Loop waiting for a request</span></span><br><span class="line">        <span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                input = socket.getInputStream();</span><br><span class="line">                output = socket.getOutputStream();</span><br><span class="line">                <span class="comment">// create Request object and parse</span></span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(input);</span><br><span class="line">                request.parse();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// create Response object</span></span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>();</span><br><span class="line">                response.setRequest(request);</span><br><span class="line">                response.sendStaticResource();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Close the socket</span></span><br><span class="line">                socket.close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// check if the previous URI is a shutdown command</span></span><br><span class="line">                shutdown = request.getUri().equals(SHUTDOWN_COMMAND);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h2><blockquote><p>Request类负责获取请求数据，解析请求头，解析Uri</p></blockquote><h3 id="代码详解："><a href="#代码详解：" class="headerlink" title="代码详解："></a>代码详解：</h3><blockquote><p> 请求方法 — 统一资源标识符 — 协议&#x2F;版本出现在请求的第一行</p><p>GET &#x2F;home.html HTTP&#x2F;1.1</p></blockquote><ol><li>读取客户端发来的数据</li><li>解析请求资源路径<ol><li>资源路径在请求数据第一行</li><li>通过找到路径的前后空格截取到资源路径</li></ol></li></ol><h3 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wujie.ex01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wujie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-07-15 14:06</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream input;</span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Request</span><span class="params">(InputStream input)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.input = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// read a set of characters from the socket</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">2048</span>);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i = input.read(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            i = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            request.append((<span class="type">char</span>) buffer[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(request.toString());</span><br><span class="line">        uri = parseUri(request.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseUri</span><span class="params">(String requestString)</span> &#123;</span><br><span class="line">        <span class="type">int</span> index1, index2;</span><br><span class="line">        index1 = requestString.indexOf(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index1 != -<span class="number">1</span>) &#123;</span><br><span class="line">            index2 = requestString.indexOf(<span class="string">&#x27; &#x27;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (index1 &lt; index2) &#123;</span><br><span class="line">                <span class="keyword">return</span> requestString.substring(index1 + <span class="number">1</span>, index2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUri</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Response类"><a href="#Response类" class="headerlink" title="Response类"></a>Response类</h2><blockquote><p>根据客户端的请求路径，返回资源</p></blockquote><h3 id="代码详解-1"><a href="#代码详解-1" class="headerlink" title="代码详解"></a>代码详解</h3><ol><li>从request对象中获取请求资源路径</li><li>通过资源路径解析出资源</li><li>设置请求头</li><li>发送请求头和请求体（数据）</li></ol><blockquote><p>发送数据就是将数据写入socket，可以多次写入，但是注意请求头需要定义Content-Length（数据长度）或者设置Keep-Alive: timeout&#x3D;5 长连接超时时间，因为socket连接发送数据是直接发送过去，接收端需要知道数据的长度，才能正确解析数据。不然不知道数据是否完整的发送过来，就无法正确显示页面。</p></blockquote><h3 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wujie.ex01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wujie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-07-15 14:07</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BUFFER_SIZE</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    Request request;</span><br><span class="line">    OutputStream output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Response</span><span class="params">(OutputStream output)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequest</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(HttpServer.WEB_ROOT, request.getUri());</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">int</span> <span class="variable">ch</span> <span class="operator">=</span> fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (ch != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">                    sb.append(s);</span><br><span class="line">                    ch = fis.read(bytes, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> <span class="string">&quot;&lt;h1&gt;test&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//                sb.append(last);</span></span><br><span class="line"></span><br><span class="line">                length = sb.length() + last.length();</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line"><span class="comment">//                        &quot;Content-Length: &quot; + length + &quot;\r\n&quot; +</span></span><br><span class="line">                        <span class="string">&quot;Keep-Alive: timeout=5\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> message + sb;</span><br><span class="line">                <span class="type">byte</span>[] sbByte = result.getBytes();</span><br><span class="line">                output.write(sbByte);</span><br><span class="line">                output.write(last.getBytes());</span><br><span class="line"><span class="comment">//                output.flush();</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// file not found</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;HTTP/1.1 404 File Not Found\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Type: text/html\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Content-Length: 23\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;h1&gt;File Not Found&lt;/h1&gt;&quot;</span>;</span><br><span class="line">                output.write(errorMessage.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> How Tomcat Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat</title>
      <link href="/blog/2022/07/08/tomcat/tomcat/"/>
      <url>/blog/2022/07/08/tomcat/tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat整体架构"><a href="#Tomcat整体架构" class="headerlink" title="Tomcat整体架构"></a>Tomcat整体架构</h1><h2 id="Context-应用上下文-容器"><a href="#Context-应用上下文-容器" class="headerlink" title="Context 应用上下文-容器"></a>Context 应用上下文-容器</h2><blockquote><p>Engine管理Host<br>Host管理Context<br>Context管理Wrapper<br>Wrapper管理Servlet</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Request</span><br><span class="line"></span><br><span class="line">Pipeline</span><br><span class="line">  List\&lt;Value&gt;</span><br><span class="line"></span><br><span class="line">Engine</span><br><span class="line">  List\&lt;Host&gt; hosts;</span><br><span class="line">  Pipeline pipe</span><br><span class="line"></span><br><span class="line">Host</span><br><span class="line">  List\&lt;Context&gt; contexts;</span><br><span class="line">  Pipeline pipe</span><br><span class="line"></span><br><span class="line">Context</span><br><span class="line">  List\&lt;Wrapper&gt; servlets;</span><br><span class="line">  Pipeline pipe</span><br><span class="line"></span><br><span class="line">Wrapper--某一个Servlet类</span><br><span class="line">  List\&lt;Servlet&gt; servlets;</span><br><span class="line">  Servlet</span><br><span class="line">  Pipeline pipe</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/ServletDemoHello##2&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\IdeaProjects\ServletDemo\target\classes&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Host</p><blockquote><p>localhost：访问的域名<br>webapps：项目部署文件夹，tomcat会在此文件夹下寻找项目<br>unpackWARs：是否解压war包<br>autoDeploy：自动部署</p></blockquote></blockquote><blockquote><p>Context：应用（项目）</p><blockquote><p>path：应用访问路径<br>docBase：应用真实路径</p></blockquote></blockquote><h1 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h1>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程实战</title>
      <link href="/blog/2022/07/04/bookNote/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
      <url>/blog/2022/07/04/bookNote/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="重入"><a href="#重入" class="headerlink" title="重入"></a>重入</h1><img src="/blog/2022/07/04/bookNote/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/1687934852148.png" class="" width="1687934852148"><h1 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h1><p>多线程的情况下，无法保证读操作获取的是最新的值。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客刷题</title>
      <link href="/blog/2022/07/04/java/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98/"/>
      <url>/blog/2022/07/04/java/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p><strong>四种引用类型</strong></p><p>JDK1.2 之前，一个对象只有“已被引用”和”未被引用”两种状态，这将无法描述某些特殊情况下的对象，比如，当内存充足时需要保留，而内存紧张时才需要被抛弃的一类对象。</p><p>所以在 JDK.1.2 之后，Java 对引用的概念进行了扩充，将引用分为了：强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4 种，这 4 种引用的强度依次减弱。</p><h2 id="一，强引用"><a href="#一，强引用" class="headerlink" title="一，强引用"></a><strong>一，强引用</strong></h2><p>Object obj &#x3D; new Object(); &#x2F;&#x2F;只要obj还指向Object对象，Object对象就不会被回收 obj &#x3D; null; &#x2F;&#x2F;手动置null</p><p>只要强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。如果想中断强引用与对象之间的联系，可以显示的将强引用赋值为null，这样一来，JVM就可以适时的回收对象了</p><h2 id="二，软引用"><a href="#二，软引用" class="headerlink" title="二，软引用"></a><strong>二，软引用</strong></h2><p>软引用是用来描述一些非必需但仍有用的对象。<strong>在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常</strong>。这种特性常常被用来实现缓存技术，比如网页缓存，图片缓存等。</p><p>在 JDK1.2 之后，用java.lang.ref.SoftReference类来表示软引用。</p><h2 id="三，弱引用"><a href="#三，弱引用" class="headerlink" title="三，弱引用"></a><strong>三，弱引用</strong></h2><p>弱引用的引用强度比软引用要更弱一些，<strong>无论内存是否足够，只要 JVM 开始进行垃圾回收，那些被弱引用关联的对象都会被回收</strong>。在 JDK1.2 之后，用 java.lang.ref.WeakReference 来表示弱引用。</p><h2 id="四，虚引用"><a href="#四，虚引用" class="headerlink" title="四，虚引用"></a><strong>四，虚引用</strong></h2><p>虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就和没有任何引用一样，它随时可能会被回收，在 JDK1.2 之后，用 PhantomReference 类来表示，通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用。</p><h1 id="java-daemon线程"><a href="#java-daemon线程" class="headerlink" title="java daemon线程"></a>java daemon线程</h1><p>java线程是一个运用很广泛的重点知识,我们很有必要了解java的daemon线程.</p><p>1.首先我们必须清楚的认识到java的线程分为两类: 用户线程和daemon线程</p><p>A.　　用户线程: 用户线程可以简单的理解为用户定义的线程,当然包括main线程(以前我错误的认为main线程也是一个daemon线程,但是慢慢的发现原来main线程不是,因为如果我再main线程中创建一个用户线程,并且打出日志,我们会发现这样一个问题,main线程运行结束了,但是我们的线程任然在运行).</p><p>B.　　daemon线程: daemon线程是为我们创建的用户线程提供服务的线程,比如说jvm的GC等等,这样的线程有一个非常明显的特征: 当用户线程运行结束的时候,daemon线程将会自动退出.(由此我们可以推出下面关于daemon线程的几条基本特点)</p><p>2.　daemon 线程的特点: </p><p>A.　　守护线程创建的过程中需要先调用setDaemon方法进行设置,然后再启动线程.否则会报出IllegalThreadStateException异常.(个人在想一个问题,为什么不能动态更改线程为daemon线程?有时间一个补上这个内容,现在给出一个猜测: 是因为jvm判断线程状态的时候,如果当前只存在一个线程Thread1,如果我们把这个线程动态更改为daemon线程,jvm会认为当前已经不存在用户线程而退出,稍后将会给出正确结论,抱歉!如果有哪位大牛看到,希望给出指点,谢谢!)</p><p>B.　　由于daemon线程的终止条件是当前是否存在用户线程,所以我们不能指派daemon线程来进行一些业务操作,而只能服务用户线程.</p><p>C.　　daemon线程创建的子线程任然是daemon线程.</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h1><p>在一个有序数组中，找到目标元素所在的索引位置。每次取区间的中间数据与目标数据对比，如果相同则找到索引，不同则改变区间，继续取区间中间的数据比较。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = ++mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = --mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法难点"><a href="#算法难点" class="headerlink" title="算法难点"></a>算法难点</h1><blockquote><p>该算法采用左闭右闭即[left, right]<br>循环应当写&lt;&#x3D;<br>while(left &lt;&#x3D; right)</p></blockquote><p>当区间只有2个位置，left和right时，mid &#x3D; (left + right) &#x2F; 2 &#x3D; left。如果此时还是没有找到，那么还有可能时right位置，所以下一步只剩一个位置，left &#x3D; right，这时还要进入循环判断一次，所以需要left &lt;&#x3D; right。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有序数组的平方</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">力扣链接</a></p><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote><p>使用3个指针进行操作</p></blockquote><ol><li>一头一尾指向原始数组</li><li>第三个指向新数组的尾部</li><li>头尾指针比较值的大小，大的向中间移动，大的值放入新数组，从后向前填充数据</li><li>当两个指针相遇时，是最后一次比较</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">resultIndex</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[head] * nums[head] &gt; nums[end] * nums[end]) &#123;</span><br><span class="line">               result[resultIndex--] = nums[head] * nums[head];</span><br><span class="line">               head++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[resultIndex--] = nums[end] * nums[end];</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长度最小的子数组</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E6%B3%95%EF%BC%89/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针法（快慢指针法）"><a href="#双指针法（快慢指针法）" class="headerlink" title="双指针法（快慢指针法）"></a>双指针法（快慢指针法）</h1><blockquote><p>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p></blockquote><p>数组：<a href="https://leetcode.cn/problems/remove-element/submissions/">就移除个元素很难么？(力扣)</a></p><p>双指针法（快慢指针法）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p><ul><li><p>暴力解法时间复杂度：O(n^2)</p></li><li><p>双指针时间复杂度：O(n)<br>这道题目迷惑了不少同学，纠结于数组中的元素为什么不能删除，主要是因为以下两点：</p></li><li><p>数组在内存中是连续的地址空间，不能释放单一元素，如果要释放，就是全释放（程序运行结束，回收内存栈空间）。</p></li><li><p>C++中vector和array的区别一定要弄清楚，vector的底层实现是array，封装后使用更友好。<br>双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除元素</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/remove-element/">力扣链接</a></p><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> removeElement(nums, val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为最终的结果剩余的数都在前面一部分，所以移除一个元素之后，就需要将后面的数放到该位置上来。这样最终的结果才是剩余的元素在前面一部分。<br><strong>最容易想到的方案是</strong>：移除一个元素之后就将后面的元素往前移一位，然后从当前位置继续往下判断是否需要移除。但是这个方案不好，因为每次移除元素之后都要将后面的元素移动一次，太浪费时间了。<br>另一种<strong>更好的方案</strong>是：移除一个元素之后，将最后一个位置的数据放到当前位置，第二次移除时，将倒数第二个元素放到当前位置。最终移除完毕时，前面一部分是剩余的元素。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;<span class="comment">// 记录需要移动到前面的元素索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将尾部的元素移动到当前位置</span></span><br><span class="line">                <span class="comment">// 移动之前先判断尾部元素是否也等于 val</span></span><br><span class="line">                <span class="keyword">if</span> (nums[index] == val) &#123;</span><br><span class="line">                    index--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nums[i] = nums[index];</span><br><span class="line">                    index--;</span><br><span class="line">                    <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="更优解"><a href="#更优解" class="headerlink" title="更优解"></a>更优解</h1><h2 id="使用快慢指针"><a href="#使用快慢指针" class="headerlink" title="使用快慢指针"></a>使用快慢指针</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索插入位置</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/search-insert-position/">力扣链接</a></p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p>示例 1:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。</p></blockquote><p>这个和二分查找是一样的</p><blockquote><p>如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p></blockquote><p>分两种情况</p><ol><li>大于最大的值或小于最小的值，直接插入头或尾</li><li>要插入数组中部，当left &#x3D; right时，判断插入元素和当前位置值的大小，插入元素小则插入点为当前位置，插入元素大则插入点为当前位置的下一个位置。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断在不在数组中</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">                mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                    left = ++mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                    right = --mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">return</span> ++mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵 II</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%20II/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%20II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/spiral-matrix-ii">力扣链接</a></p><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote><p>右，下，上，左的顺序填充<br>注意：上和右都可以走的情况会向右走，所以这种情况应该进行判断</p></blockquote><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">return</span> <span class="variable">result</span> <span class="operator">=</span>= Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长度最小的子数组</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/1.%E6%95%B0%E7%BB%84/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/submissions/">力扣链接</a></p><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote><p><a href="">滑动窗口</a><br>时间复杂度为O(n)</p></blockquote><ol><li>左右指针都从0号位置开始。</li><li>右指针向右移动，计算左右指针闭区间的和，直到大于等于target，右指针停止移动并记录当前最小长度，左指针开始向右移动，计算左右指针闭区间的和并记录当前最小长度，直到小于target，左指针停止移动，右指针开始向右移动。</li><li>重复2的操作，直到右指针到最后一个元素，左指针停止移动为止。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">return</span> <span class="variable">result</span> <span class="operator">=</span>= Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除链表元素</title>
      <link href="/blog/2022/07/04/%E7%AE%97%E6%B3%95/2.%E9%93%BE%E8%A1%A8/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/blog/2022/07/04/%E7%AE%97%E6%B3%95/2.%E9%93%BE%E8%A1%A8/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">力扣链接</a></p><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。</p><p>示例 1：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote><p>第一个结点前添加一个结点，方便删除第一个结点<br>用一个指针指向需要判断是否删除的结点前，如果需要删除，则删除，指针不移动，如果不需要删除，则指针向后移动。直到移动到最后一个结点。</p></blockquote><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">preHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> preHead;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.next.val == val) &#123;</span><br><span class="line">                p.next = p.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> preHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行jar包，加载外部配置文件</title>
      <link href="/blog/2022/07/04/%E8%BF%90%E7%BB%B4/3.linux/%E8%BF%90%E8%A1%8Cjar%E5%8C%85%EF%BC%8C%E5%8A%A0%E8%BD%BD%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2022/07/04/%E8%BF%90%E7%BB%B4/3.linux/%E8%BF%90%E8%A1%8Cjar%E5%8C%85%EF%BC%8C%E5%8A%A0%E8%BD%BD%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="加载外部配置文件"><a href="#加载外部配置文件" class="headerlink" title="加载外部配置文件"></a>加载外部配置文件</h2><p>当配置文件需要修改时，需要重新打包项目太麻烦<br>通过加载外部配置文件更方便 spring.config.location&#x3D;外部配置文件地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar blog-springboot-0.0.1.jar --spring.config.location=blog-application.yml &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04开启SSH远程服务</title>
      <link href="/blog/2022/07/04/%E8%BF%90%E7%BB%B4/2.ubuntu/Ubuntu%2018.04%E5%BC%80%E5%90%AFSSH%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1/"/>
      <url>/blog/2022/07/04/%E8%BF%90%E7%BB%B4/2.ubuntu/Ubuntu%2018.04%E5%BC%80%E5%90%AFSSH%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>ubuntu默认不会开启SSH服务，未安装或者无法安装的VM tools工具的虚拟机编辑或者复制配置文件将会很困难，因此我们推荐使用SSH服务！！<br>建议切换到root用户下操作，否则所有指令前需要添加 sudo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ps -e | grep ssh（查看ssh服务是否开启）</span></span><br></pre></td></tr></table></figure><p><img src="http://120.26.194.15:83/articles/0a69aac95bcd0c16b94dec84f056d5f2.png" alt="image.png"></p><p>运行step1得出如图1的两行结果。ssh-agent指的是ubuntu的ssh服务的客户端，用于该ubuntu远程连接其它Linux主机。sshd指的是ubuntu的ssh服务的服务端，用于其它主机通过ssh服务连接该主机。如果没有sshd进程的话，别的系统是不能连接该ubuntu主机的，若是没有ssh-agent的话，该ubuntu主机也无法通过ssh连接其它主机。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#apt-get install openssh-client（安装ssh客户端程序）</span></span><br><span class="line"><span class="comment">#apt-get install openssh-server（安装ssh服务端程序）</span></span><br></pre></td></tr></table></figure><p>若是运行ps -e | grep ssh没有查出ssh-agent服务，但是你又想通过ssh服务连接别的系统，那么就执行apt-get install openssh-client安装ssh客户端。接着执行ssh 目标用户@目标 ip 即可连接目标主机。正常情况Ubuntu默认开启ssh-agent服务。<br>默认ssh的服务端是没有安装的，可用ps -e | grep ssh查看。若是没有sshd的进程，则运行apt-get install openssh-server安装ssh服务端；接着重新执行ps -e | grep ssh便可发现sshd已启动。至此，其它主机便可通过ssh连接该主机。</p><p>编辑sshd_config文件<br>#vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>将 PermitRootLogin 改为yes，保存退出。</p><p>#service ssh restart 或者 systemctl restart ssh（开启ssh服务）<br>#service ssh stop 或者 systemctl stop ssh（关闭ssh服务）<br>上述指令用于开启或者关闭SSH服务进程。</p><p>原文链接：<a href="https://blog.csdn.net/baidu_38407190/article/details/105981111">https://blog.csdn.net/baidu_38407190/article/details/105981111</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="/blog/2022/07/04/%E8%BF%90%E7%BB%B4/1.docker/Docker%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2022/07/04/%E8%BF%90%E7%BB%B4/1.docker/Docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="必备资料"><a href="#必备资料" class="headerlink" title="必备资料"></a>必备资料</h1><p>官网：<a href="https://www.docker.com/">https://www.docker.com/</a><br>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a><br>在Ubuntu上安装Docker：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a><br>别人的笔记：<a href="https://blog.csdn.net/Mr_YanMingXin/article/details/119504925">https://blog.csdn.net/Mr_YanMingXin/article/details/119504925</a><br>命令的帮助文档地址:<a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p><h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><p>Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。</p><ul><li><p>镜像（Image）</p></li><li><p>容器（Container）</p></li><li><p>仓库（Repository）</p></li></ul><blockquote><p>镜像：容器的模板，Docker通过镜像创建容器<br>容器：容器是隔离的一套环境，通过镜像生成<br>仓库：存放镜像的地方<br>ps: 一个镜像可以创建多个容器</p></blockquote><h1 id="为什么使用Docker"><a href="#为什么使用Docker" class="headerlink" title="为什么使用Docker"></a>为什么使用Docker</h1><ol><li>它易于使用，它提高了生产力，并且消除了为构建现代应用程序设置复杂环境的麻烦。</li><li>Docker可以快速部署应用环境</li><li>Docker可以快速部署项目</li></ol><h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><h3 id="使用存储库安装"><a href="#使用存储库安装" class="headerlink" title="使用存储库安装"></a>使用存储库安装</h3><p>在新主机上首次安装 Docker Engine 之前，您需要设置 Docker 存储库。之后，您可以从存储库安装和更新 Docker。</p><h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><ol><li><p>更新<code>apt</code>包索引并安装包以允许<code>apt</code>通过 HTTPS 使用存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure></li><li><p>添加 Docker 的官方 GPG 密钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure></li><li><p>使用以下命令设置存储库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>更新<code>apt</code>包索引，安装<em>最新版本</em>的 Docker Engine、containerd 和 Docker Compose，或者进入下一步安装特定版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>运行时收到 GPG 错误<code>apt-get update</code>？</p><p>您的默认 umask 可能设置不正确，导致无法检测到 repo 的公钥文件。运行以下命令，然后再次尝试更新您的存储库：<code>sudo chmod a+r /etc/apt/keyrings/docker.gpg</code>.</p></blockquote><ol start="2"><li><p>要安装<em>特定版本</em>的 Docker Engine，请在 repo 中列出可用版本，然后选择并安装：</p><p>一个。列出您的存储库中可用的版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line"></span><br><span class="line">docker-ce | 5:20.10.16~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages</span><br><span class="line">docker-ce | 5:20.10.15~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages</span><br><span class="line">docker-ce | 5:20.10.14~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages</span><br><span class="line">docker-ce | 5:20.10.13~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages</span><br></pre></td></tr></table></figure><p>湾。使用第二列中的版本字符串安装特定版本，例如<code>5:20.10.16~3-0~ubuntu-jammy</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure></li><li><p><code>hello-world</code> 通过运行映像来验证 Docker 引擎是否已正确安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p></li></ol><p>Docker 引擎已安装并正在运行。该<code>docker</code>组已创建，但未向其中添加任何用户。您需要使用<code>sudo</code>来运行 Docker 命令。继续<a href="https://docs.docker.com/engine/install/linux-postinstall/">Linux 后安装</a>以允许非特权用户运行 Docker 命令和其他可选配置步骤。</p><h1 id="Docker的基本命令"><a href="#Docker的基本命令" class="headerlink" title="Docker的基本命令"></a>Docker的基本命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version          <span class="comment">#查看docker的版本信息</span></span><br><span class="line">docker info             <span class="comment">#查看docker的系统信息,包括镜像和容器的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span>       <span class="comment">#帮助命令(可查看可选的参数)</span></span><br><span class="line">docker COMMAND --<span class="built_in">help</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:~<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.17</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.17.11</span><br><span class="line"> Git commit:        100c701</span><br><span class="line"> Built:             Mon Jun  6 23:02:56 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.17</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.17.11</span><br><span class="line">  Git commit:       a89b842</span><br><span class="line">  Built:            Mon Jun  6 23:01:02 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.6</span><br><span class="line">  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.2</span><br><span class="line">  GitCommit:        v1.1.2-0-ga916309</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker info</span></span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">  buildx: Docker Buildx (Docker Inc., v0.8.2-docker)</span><br><span class="line">  scan: Docker Scan (Docker Inc., v0.17.0)</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 5</span><br><span class="line">  Running: 4</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 1</span><br><span class="line"> Images: 6</span><br><span class="line"> Server Version: 20.10.17</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">  userxattr: <span class="literal">false</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class="line"> runc version: v1.1.2-0-ga916309</span><br><span class="line"> init version: de40ad0</span><br><span class="line"> Security Options:</span><br><span class="line">  apparmor</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 5.3.0-28-generic</span><br><span class="line"> Operating System: Ubuntu 18.04.4 LTS</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 3.73GiB</span><br><span class="line"> Name: wujie-TM1607</span><br><span class="line"> ID: Z66R:SJRZ:XEFY:3RKO:IYQA:56OK:M3J6:DZAD:Y2Q2:K77T:SI3K:LA2N</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="拉取-docker-pull"><a href="#拉取-docker-pull" class="headerlink" title="拉取 docker pull"></a>拉取 docker pull</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker pull mysql：5.7</span></span><br><span class="line">invalid reference format</span><br><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">824b15f81d65: Already exists </span><br><span class="line">c559dd1913db: Already exists </span><br><span class="line">e201c19614e6: Already exists </span><br><span class="line">f4247e8f6125: Already exists </span><br><span class="line">dc9fefd8cfb5: Already exists </span><br><span class="line">32cfafb64fee: Already exists </span><br><span class="line">c9caad7ee0fc: Already exists </span><br><span class="line">f55f87b960ba: Pull complete </span><br><span class="line">459044ae96d1: Pull complete </span><br><span class="line">0dc62f07e93a: Pull complete </span><br><span class="line">f2b9a5e10609: Pull complete </span><br><span class="line">Digest: sha256:60adb6e158c126a6cd93aa7d4aaee15bcf1beae224c04363cbf088193a696802</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看-docker-images"><a href="#查看-docker-images" class="headerlink" title="查看 docker images"></a>查看 docker images</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG          IMAGE ID       CREATED        SIZE</span><br><span class="line">redis         latest       2e50d70ba706   3 days ago     117MB</span><br><span class="line">nginx         latest       55f4b40fe486   3 days ago     142MB</span><br><span class="line">mysql         5.7          74a6a7ec181f   3 days ago     462MB</span><br><span class="line">mysql         latest       968083d5be36   3 days ago     524MB</span><br><span class="line">rabbitmq      management   77d763f31ce4   4 days ago     257MB</span><br><span class="line">hello-world   latest       feb5d9fea6a5   9 months ago   13.3kB</span><br><span class="line">java          8            d23bdf5b1b1b   5 years ago    643MB</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除-docker-rmi-id"><a href="#删除-docker-rmi-id" class="headerlink" title="删除 docker rmi [id]"></a>删除 docker rmi [id]</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker rmi feb5d9fea6a5</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br><span class="line">Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359</span><br><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="查看容器-docker-ps"><a href="#查看容器-docker-ps" class="headerlink" title="查看容器 docker ps"></a>查看容器 docker ps</h3><blockquote><p>查看正在运行的容器</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED        STATUS          PORTS                                                                                                                                                 NAMES</span><br><span class="line">e4aa883afa03   nginx                 <span class="string">&quot;/docker-entrypoint.…&quot;</span>   35 hours ago   Up 18 minutes   0.0.0.0:80-83-&gt;80-83/tcp, :::80-83-&gt;80-83/tcp                                                                                                         nginx</span><br><span class="line">84133418c131   rabbitmq:management   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago     Up 18 minutes   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbit</span><br><span class="line">a976989d85ad   redis                 <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago     Up 18 minutes   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp                                                                                                             redis</span><br><span class="line">f3197f694a9c   mysql                 <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago     Up 18 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp                                                                                                  mysql</span><br><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker rmi feb5d9fea6a5</span></span><br><span class="line">Error response from daemon: conflict: unable to delete feb5d9fea6a5 (must be forced) - image is being used by stopped container 9b8af20b01c6</span><br></pre></td></tr></table></figure><blockquote><p>查看所有的容器 docker ps -a<br>所有创建了的容器</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED        STATUS                  PORTS                                                                                                                                                 NAMES</span><br><span class="line">e4aa883afa03   nginx                 <span class="string">&quot;/docker-entrypoint.…&quot;</span>   35 hours ago   Up 19 minutes           0.0.0.0:80-83-&gt;80-83/tcp, :::80-83-&gt;80-83/tcp                                                                                                         nginx</span><br><span class="line">84133418c131   rabbitmq:management   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago     Up 19 minutes           4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   rabbit</span><br><span class="line">a976989d85ad   redis                 <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago     Up 19 minutes           0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp                                                                                                             redis</span><br><span class="line">f3197f694a9c   mysql                 <span class="string">&quot;docker-entrypoint.s…&quot;</span>   2 days ago     Up 19 minutes           0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp                                                                                                  mysql</span><br><span class="line">9b8af20b01c6   hello-world           <span class="string">&quot;/hello&quot;</span>                 2 days ago     Exited (0) 2 days ago                                                                                                                                                         crazy_clarke</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>docker run [可选参数] image 运行容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数说明</span></span><br><span class="line">--name=<span class="string">&quot;名字&quot;</span>           指定容器名字</span><br><span class="line">-d                     后台方式运行</span><br><span class="line">-it                    使用交互方式运行,进入容器查看内容</span><br><span class="line">-p                     指定容器的端口</span><br><span class="line">( -p ip:主机端口:容器端口  配置主机端口映射到容器端口</span><br><span class="line">  -p 主机端口:容器端口</span><br><span class="line">  -p 容器端口)</span><br><span class="line">-P                     随机指定端口(大写的P)</span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">[root@iZ1608aqb7ntn9Z /]<span class="comment"># docker run 8cf625070931</span></span><br><span class="line">2021-08-03 06:48:07+00:00 [Note] [Entrypoint]: Entrypoint script <span class="keyword">for</span> MySQL Server 5.7.35-1debian10 started.</span><br><span class="line">2021-08-03 06:48:07+00:00 [Note] [Entrypoint]: Switching to dedicated user <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">2021-08-03 06:48:07+00:00 [Note] [Entrypoint]: Entrypoint script <span class="keyword">for</span> MySQL Server 5.7.35-1debian10 started.</span><br><span class="line">2021-08-03 06:48:07+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified</span><br><span class="line">    You need to specify one of the following:</span><br><span class="line">    - MYSQL_ROOT_PASSWORD</span><br><span class="line">    - MYSQL_ALLOW_EMPTY_PASSWORD</span><br><span class="line">    - MYSQL_RANDOM_ROOT_PASSWORD</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除容器-docker-rm-f-id"><a href="#删除容器-docker-rm-f-id" class="headerlink" title="删除容器 docker rm -f [id]"></a>删除容器 docker rm -f [id]</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9b8af20b01c6   hello-world           <span class="string">&quot;/hello&quot;</span>                 2 days ago     Exited (0) 2 days ago                                                                                                                                                         crazy_clarke</span><br><span class="line"></span><br><span class="line">root@wujie-TM1607:/home/wujie<span class="comment"># docker rm -f 9b8af20b01c6</span></span><br><span class="line">9b8af20b01c6</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="查看所有镜像id"><a href="#查看所有镜像id" class="headerlink" title="查看所有镜像id"></a>查看所有镜像id</h3><p>docker image -q</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大飒飒东风但是</span><br></pre></td></tr></table></figure><h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="8、8"><a href="#8、8" class="headerlink" title="8、8"></a>8、8</h1>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu拒绝root用户ssh远程登录解决办法</title>
      <link href="/blog/2022/07/04/%E8%BF%90%E7%BB%B4/2.ubuntu/ubuntu%E6%8B%92%E7%BB%9Droot%E7%94%A8%E6%88%B7ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/blog/2022/07/04/%E8%BF%90%E7%BB%B4/2.ubuntu/ubuntu%E6%8B%92%E7%BB%9Droot%E7%94%A8%E6%88%B7ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="无法登录原因"><a href="#无法登录原因" class="headerlink" title="无法登录原因"></a>无法登录原因</h2><p>ubuntu拒绝root ssh远程登录通常情况是ssh设置了禁止root远程登录</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改ssh配置，然后重启ssh服务即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到并用#注释掉这行：PermitRootLogin prohibit-password<br>新建一行 添加：PermitRootLogin yes<br>重启服务：service ssh restart</p><blockquote><p>两个配置项的意思是：<br>PermitRootLogin yes-允许root登录，设为yes。<br>PermitRootLogin prohibit-password-允许root登录，但是禁止root用密码登录，这行是需要被注释掉的！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> ssh </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu终端命令--查看端口占用及关闭</title>
      <link href="/blog/2022/07/04/%E8%BF%90%E7%BB%B4/2.ubuntu/Ubuntu%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4--%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%85%B3%E9%97%AD/"/>
      <url>/blog/2022/07/04/%E8%BF%90%E7%BB%B4/2.ubuntu/Ubuntu%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4--%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="1、查看已经连接的服务端口"><a href="#1、查看已经连接的服务端口" class="headerlink" title="1、查看已经连接的服务端口"></a>1、查看已经连接的服务端口</h3><p>ESTABLISHED</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -a</span><br></pre></td></tr></table></figure><h3 id="2、查看所有的服务端口"><a href="#2、查看所有的服务端口" class="headerlink" title="2、查看所有的服务端口"></a>2、查看所有的服务端口</h3><p>LISTEN，ESTABLISHED</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ap</span><br></pre></td></tr></table></figure><h3 id="3、查看指定端口"><a href="#3、查看指定端口" class="headerlink" title="3、查看指定端口"></a>3、查看指定端口</h3><p>可以结合 grep 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ap | grep 8080</span><br></pre></td></tr></table></figure><p>也可以使用 lsof 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8888</span><br></pre></td></tr></table></figure><p><strong>(这个命令很好用)</strong></p><h3 id="4、关闭占用端口程序"><a href="#4、关闭占用端口程序" class="headerlink" title="4、关闭占用端口程序"></a>4、关闭占用端口程序</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shkill -9 PID号</span><br></pre></td></tr></table></figure><blockquote><p>Ps：kill 就是给某个进程 id 发送了一个信号。<br>默认发送的信号是 SIGTERM，而 kill -9 发送的信号是 SIGKILL，即 exit。<br>exit 信号不会被系统阻塞，所以 kill -9 能顺利杀掉进程。</p></blockquote><p>来源：<a href="https://blog.51cto.com/aiyc/2886117">https://blog.51cto.com/aiyc/2886117</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
            <tag> 关闭进程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
